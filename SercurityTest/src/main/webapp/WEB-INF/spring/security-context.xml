<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		

	<!-- 6. 사용자 정의 접근 거부 처리자 -->
	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	<!-- 8. 로그인 성공 처리자 -->
	<bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>
	<!-- 10. JDBC 인증 인가 : 암호화 처리기 사용 안함 -->
<!-- 	<bean id="customPasswordEncoder" class="kr.or.ddit.security.CustomNoOpPasswordEncoder"/> -->
	<!-- 11. 사용자 테이블 이용한 인증/인가 처리 : 비밀번호 암호화 처리기 사용 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<!-- 12. UserDetailsService 재정의 -->
	<bean id="customUserDetailsService" class="kr.or.ddit.security.CustomUserDetailsService"/>
 
	<security:http>
		<!-- 3. 접근 제한 설정 -->
<!-- 		<security:intercept-url pattern="/board/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')"/> -->
<!-- 		<security:intercept-url pattern="/notice/list" access="permitAll"/> -->
<!-- 		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')"/> -->
		<!-- 3. 접근 제한 설정 끝 -->
		<!-- 폼 기반 인증 기능을 사용한다. -->
<!-- 		<security:form-login/> -->
		<!-- 7. 사용자 정의 로그인 페이지 -->
<!-- 		<security:form-login login-page="/login"/> -->
		<!-- 8. 로그인 성공 처리: 로그인 성공 후 처리를 담당하는 처리자로 지정한다. -->
		<security:form-login login-page="/login" authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- 5. 접근 거부 처리: 로그인이 된 회원 권한이 없을 때 발동 -->
<!-- 		<security:access-denied-handler error-page="/accessError"/> -->
		<!-- 6. 사죵자 정의 접근 거부 처리자: 등록한 CustomAccessDeniedHandler를 접근 거부 처리자로 지정 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화한다. -->
		<!-- delete-cookies : 삭제한 쿠키 정보 지정 -->
		<security:logout logout-url="/logout" invalidate-session="true" delete-cookies="remember-me, JSESSION_ID"/>
		
		<!-- 14. 자동 로그인 적용 : 쿠키의 유효시간을 지정한다(604800 : 7일) -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 10번 진행 시, 주석으로 JDBC를 이용한 인증/인가를 가능하도록 한다. -->
<!-- 			<security:user-service> -->
<!-- 				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER"/> -->
<!-- 				<security:user name="admin" password="{noop}1234" authorities="ROLE_MEMBER, ROLE_ADMIN"/> -->
<!-- 			</security:user-service> -->
			
			<!-- 10. JDBC를 이용한 인증/인가 처리: 비밀번호 암호화 처리기로 암호화를 사용하지 않는다. -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"/> -->
<!-- 			<security:password-encoder ref="customPasswordEncoder"/> -->

			<!-- 11. 사용자 테이블 이용한 인증/인가 : 비밀번호 암호화 처리기로 암호화를 사용한다. -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"  -->
<!-- 				users-by-username-query="select user_id, user_pw, enabled from member where user_id = ?" -->
<!-- 				authorities-by-username-query="select m.user_id, auth from member_auth ma, member m where ma.user_no = m.user_no and m.user_id = ?"/> -->
<!-- 			<security:password-encoder ref="bcryptPasswordEncoder"/>			 -->

			<!-- 12. UserDetailsService 재정의 : 암호화 처리기를 사용하겠다는 표시 -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>			
			
		</security:authentication-provider>
	</security:authentication-manager>
	

</beans>
